// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id                     String                   @id @default(cuid())
    name                   String?
    email                  String?                  @unique
    emailVerified          DateTime?
    address                String                   @unique
    image                  String?
    isAdmin                Boolean                  @default(false)
    accounts               Account[]
    sessions               Session[]
    createdAt              DateTime                 @default(now())
    updatedAt              DateTime                 @updatedAt
    Profile                Profile?
    ProfileUserLike        ProfileUserLike[]
    ProfileUserFollows     ProfileUserFollows[]
    Collection             Collection[]
    CollectionUserLike     CollectionUserLike[]
    Tag                    Tag[]
    CreatedReports         Report[]
    CollectionCollaborator CollectionCollaborator[]
    NftUserLike            NftUserLike[]
    PushSubscription       PushSubscription[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Profile {
    id                      String               @id @default(cuid())
    createdAt               DateTime             @default(now())
    updatedAt               DateTime             @updatedAt
    user                    User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId                  String               @unique
    bio                     String?
    twitter                 String?
    discord                 String?
    instagram               String?
    name                    String?              @unique
    email                   String?              @unique
    banner                  String?              @db.VarChar(5000)
    img                     String?              @db.VarChar(5000)
    views                   Int                  @default(0)
    isCensored              Boolean?             @default(false)
    ProfileUserLike         ProfileUserLike[]
    ProfileUserFollows      ProfileUserFollows[]
    reports                 Report[]
    notifyWhenSold          Boolean?             @default(false)
    notifyWhenOffered       Boolean?             @default(false)
    notifyWhenOfferAccepted Boolean?             @default(false)
    notifyWhenOutbid        Boolean?             @default(false)
    emailWhenSold           Boolean?             @default(false)
    emailWhenOffered        Boolean?             @default(false)
    emailWhenOfferAccepted  Boolean?             @default(false)
    emailWhenOutbid         Boolean?             @default(false)
}

model ProfileUserLike {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
    profileId String

    @@unique([userId, profileId])
    @@index([profileId])
}

model ProfileUserFollows {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
    profileId String

    @@unique([userId, profileId])
    @@index([profileId])
}

model Collection {
    id                 String                   @id @default(cuid())
    name               String?
    symbol             String?
    description        String?                  @db.VarChar(5000)
    createdAt          DateTime                 @default(now())
    updatedAt          DateTime                 @updatedAt
    url                String?                  @unique
    logo               String?
    banner             String?
    dropImg            String?
    dropDescription    String?                  @db.VarChar(5000)
    address            String
    isExplicitContent  Boolean?                 @default(false)
    website            String?
    discord            String?
    twitter            String?
    facebook           String?
    youtube            String?
    tiktok             String?
    instagram          String?
    telegram           String?
    views              Int                      @default(0)
    chainId            Int                      @default(1)
    isCensored         Boolean?                 @default(false)
    isPublished        Boolean?                 @default(false)
    reports            Report[]
    tags               Tag[]
    createdById        String?
    createdBy          User?                    @relation(fields: [createdById], references: [id], onDelete: Cascade)
    CollectionUserLike CollectionUserLike[]
    collaborators      CollectionCollaborator[]
    nfts               Nft[]

    @@unique([chainId, address])
    @@unique([address, chainId])
    @@index([createdById])
}

model CollectionCollaborator {
    id           String     @id @default(cuid())
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
    collectionId String
    collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
    userId       String
    user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([collectionId, userId])
    @@index([userId])
}

model CollectionUserLike {
    id                String     @id @default(cuid())
    createdAt         DateTime   @default(now())
    updatedAt         DateTime   @updatedAt
    user              User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId            String
    collectionAddress String
    collectionChainId Int
    collection        Collection @relation(fields: [collectionAddress, collectionChainId], references: [address, chainId], onDelete: Cascade)

    @@unique([userId, collectionAddress, collectionChainId])
    @@index([collectionAddress, collectionChainId])
}

model Nft {
    id          String        @id @default(cuid())
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    address     String
    chainId     Int
    tokenId     String
    collection  Collection    @relation(fields: [address, chainId], references: [address, chainId], onDelete: Cascade)
    isCensored  Boolean?      @default(false)
    views       Int           @default(0)
    reports     Report[]
    NftUserLike NftUserLike[]

    @@unique([address, chainId, tokenId])
    @@index([address, chainId])
}

model NftUserLike {
    id         String   @id @default(cuid())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     String
    nftAddress String
    nftTokenId String
    nftChainId Int
    nft        Nft      @relation(fields: [nftAddress, nftChainId, nftTokenId], references: [address, chainId, tokenId], onDelete: Cascade)

    @@unique([userId, nftAddress, nftChainId, nftTokenId])
    @@index([nftAddress, nftChainId, nftTokenId])
}

model Tag {
    id          String       @id @default(cuid())
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    createdById String
    createdBy   User         @relation(fields: [createdById], references: [id], onDelete: Cascade)
    name        String       @unique
    collections Collection[]

    @@index([createdById])
}

enum ReportType {
    COLLECTION
    NFT
    PROFILE
}

enum ReportStatus {
    PENDING
    APPROVED
    REJECTED
}

model Report {
    id           String       @id @default(cuid())
    createdAt    DateTime     @default(now())
    updatedAt    DateTime     @updatedAt
    createdBy    User         @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById  String
    reason       String
    status       ReportStatus
    type         ReportType
    contentId    String
    profile      Profile?     @relation(fields: [profileId], references: [id])
    profileId    String?
    collection   Collection?  @relation(fields: [collectionId], references: [id])
    collectionId String?
    Nft          Nft?         @relation(fields: [nftId], references: [id])
    nftId        String?

    @@index([createdById])
    @@index([collectionId])
    @@index([profileId])
    @@index([nftId])
}

enum AdvertisementType {
    BANNER
    HERO
}

model Advertisement {
    id        String            @id @default(cuid())
    createdAt DateTime          @default(now())
    updatedAt DateTime          @updatedAt
    name      String
    image     String
    link      String
    startDate DateTime
    endDate   DateTime
    type      AdvertisementType
    views     Int               @default(0)
    clicks    Int               @default(0)
}

model OnchainAdvertisementContentURI {
    id         String   @id @default(cuid())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    contentURI String   @unique
    isCensored Boolean  @default(false)
}

model OnchainAdvertisement {
    id         String   @id @default(cuid())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    address    String
    contentURI String
    chainId    Int
    dayId      Int
    views      Int      @default(0)
    clicks     Int      @default(0)
    isCensored Boolean  @default(false)

    @@unique([address, chainId, contentURI, dayId])
    @@index([address, chainId, contentURI])
}

model PushSubscription {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    endpoint  String   @unique @db.VarChar(500)
    p256dh    String   @db.Text
    auth      String   @db.Text

    @@index([userId])
}
